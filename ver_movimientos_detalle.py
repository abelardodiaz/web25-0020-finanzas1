#!/usr/bin/env python
"""
Script detallado para ver movimientos BBVA y entender la l√≥gica contable
"""
import pandas as pd
import sys

def ver_movimientos_bbva(archivo_path):
    """Ve los movimientos BBVA en detalle"""
    print(f"\n{'='*100}")
    print(f"üìä AN√ÅLISIS DETALLADO DE MOVIMIENTOS BBVA")
    print(f"   Archivo: {archivo_path}")
    print('='*100)
    
    # Leer el archivo completo
    df_raw = pd.read_excel(archivo_path, header=None)
    
    # Encontrar donde empiezan los datos (buscar FECHA)
    for idx in range(len(df_raw)):
        if 'FECHA' in str(df_raw.iloc[idx, 0]):
            header_row = idx
            break
    
    # Leer con el header correcto
    df = pd.read_excel(archivo_path, skiprows=header_row)
    
    # Limpiar filas vac√≠as
    df = df.dropna(how='all')
    df = df[df['FECHA'].notna()]
    
    # Convertir tipos de datos
    df['CARGO O ABONO'] = pd.to_numeric(df['CARGO O ABONO'], errors='coerce')
    df['SALDO'] = pd.to_numeric(df['SALDO'], errors='coerce')
    
    print(f"\nüìà Total de movimientos encontrados: {len(df)}")
    print(f"üìÖ Per√≠odo: {df['FECHA'].min()} a {df['FECHA'].max()}")
    print(f"üí∞ Saldo inicial: ${df['SALDO'].iloc[-1]:,.2f}")
    print(f"üí∞ Saldo final: ${df['SALDO'].iloc[0]:,.2f}")
    
    print("\n" + "="*100)
    print("MOVIMIENTOS DETALLADOS (Orden cronol√≥gico inverso - m√°s reciente primero)")
    print("="*100)
    
    for idx, row in df.iterrows():
        fecha = row['FECHA']
        desc = row['DESCRIPCION']
        monto = row['CARGO O ABONO']
        saldo = row['SALDO']
        
        print(f"\n{'‚îÄ'*100}")
        print(f"üìÖ Fecha: {fecha}")
        print(f"üìù Descripci√≥n: {desc}")
        
        # Identificar tipo de movimiento
        if monto < 0:
            print(f"üî¥ CARGO BANCARIO: ${abs(monto):,.2f} (Sale dinero de BBVA)")
            print(f"   ‚Üí En t√©rminos contables:")
            print(f"      ‚Ä¢ BBVA 5019 (DEUDORA): ABONO ${abs(monto):,.2f} ‚Üí Saldo disminuye")
            print(f"      ‚Ä¢ Cuenta destino: CARGO ${abs(monto):,.2f}")
            
            # Identificar la cuenta destino
            if 'SPEI ENVIADO' in desc:
                if 'SANTANDER' in desc:
                    print(f"      ‚Ä¢ Destino identificado: Santander")
                elif 'BANORTE' in desc:
                    print(f"      ‚Ä¢ Destino identificado: Banorte")
                elif 'BANAMEX' in desc:
                    print(f"      ‚Ä¢ Destino identificado: Banamex")
                elif 'STP' in desc:
                    print(f"      ‚Ä¢ Destino identificado: STP")
                elif 'Mercado Pago' in desc:
                    print(f"      ‚Ä¢ Destino identificado: Mercado Pago")
            
        else:
            print(f"üü¢ ABONO BANCARIO: ${monto:,.2f} (Entra dinero a BBVA)")
            print(f"   ‚Üí En t√©rminos contables:")
            print(f"      ‚Ä¢ BBVA 5019 (DEUDORA): CARGO ${monto:,.2f} ‚Üí Saldo aumenta")
            print(f"      ‚Ä¢ Cuenta origen: ABONO ${monto:,.2f}")
            
            # Identificar la cuenta origen
            if 'SPEI RECIBIDO' in desc:
                if 'SANTANDER' in desc:
                    print(f"      ‚Ä¢ Origen identificado: Santander")
                elif 'BANORTE' in desc:
                    print(f"      ‚Ä¢ Origen identificado: Banorte")
                elif 'NU MEXICO' in desc:
                    print(f"      ‚Ä¢ Origen identificado: Nu M√©xico")
            elif 'PAGO CUENTA DE TERCERO' in desc:
                print(f"      ‚Ä¢ Origen: Dep√≥sito de terceros BBVA")
        
        print(f"üíº Saldo despu√©s del movimiento: ${saldo:,.2f}")
    
    # Resumen
    print("\n" + "="*100)
    print("RESUMEN DE MOVIMIENTOS")
    print("="*100)
    
    cargos = df[df['CARGO O ABONO'] < 0]
    abonos = df[df['CARGO O ABONO'] > 0]
    
    print(f"\nüî¥ CARGOS (Salidas):")
    print(f"   ‚Ä¢ Cantidad: {len(cargos)} movimientos")
    print(f"   ‚Ä¢ Total: ${abs(cargos['CARGO O ABONO'].sum()):,.2f}")
    
    print(f"\nüü¢ ABONOS (Entradas):")
    print(f"   ‚Ä¢ Cantidad: {len(abonos)} movimientos")
    print(f"   ‚Ä¢ Total: ${abonos['CARGO O ABONO'].sum():,.2f}")
    
    print(f"\nüìä FLUJO NETO: ${df['CARGO O ABONO'].sum():,.2f}")
    
    return df

def explicar_correccion_necesaria():
    """Explica la correcci√≥n necesaria en el sistema"""
    print("\n" + "="*100)
    print("‚ö†Ô∏è CORRECCI√ìN NECESARIA EN EL SISTEMA v0.8.1")
    print("="*100)
    
    print("""
üîß PROBLEMA IDENTIFICADO:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
El sistema actual est√° usando terminolog√≠a incorrecta:

‚ùå ACTUAL (INCORRECTO):
   ‚Ä¢ Cuando BBVA recibe dinero ‚Üí Lo llama "ABONO"
   ‚Ä¢ Cuando BBVA env√≠a dinero ‚Üí Lo llama "CARGO"

‚úÖ CORRECTO (seg√∫n registros_contables.md):
   ‚Ä¢ Cuando BBVA (DEUDORA) recibe dinero ‚Üí Es un CARGO contable (aumenta)
   ‚Ä¢ Cuando BBVA (DEUDORA) env√≠a dinero ‚Üí Es un ABONO contable (disminuye)

üìù CAMBIOS NECESARIOS:
‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
1. En core/services/bbva_assistant.py l√≠nea 549:
   - Cambiar comentario "ABONO: Entra dinero" por "CARGO: Entra dinero"
   
2. En core/services/bbva_assistant.py l√≠nea 535:
   - Cambiar comentario "CARGO: Sale dinero" por "ABONO: Sale dinero"

3. En core/models.py m√©todo saldo_legacy():
   - La l√≥gica de c√°lculo est√° correcta
   - Pero la terminolog√≠a en comentarios debe ajustarse

4. Verificar que AsientoContable y PartidaContable usen correctamente:
   - debito/credito seg√∫n la naturaleza de la cuenta
""")

if __name__ == "__main__":
    archivo = "movimientos (1).xlsx"
    if len(sys.argv) > 1:
        archivo = sys.argv[1]
    
    df = ver_movimientos_bbva(archivo)
    explicar_correccion_necesaria()
    
    print("\n" + "="*100)
    print("‚úÖ AN√ÅLISIS COMPLETADO")
    print("="*100)