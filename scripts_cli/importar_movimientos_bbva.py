#!/usr/bin/env python3
"""
Script CLI para importar movimientos bancarios BBVA desde JSON
Versi√≥n 0.8.3 - Sistema de importaci√≥n interactiva
"""
import os
import sys
import json
import logging
import glob
from datetime import datetime
from decimal import Decimal
from pathlib import Path

# Agregar el directorio del proyecto al path
sys.path.insert(0, str(Path(__file__).resolve().parent.parent))

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
import django
django.setup()

# Imports de Django
from django.db import transaction
from core.models import Cuenta, Transaccion, Categoria, TipoCuenta, TransaccionTipo, TransaccionEstado

# Configurar logging
logging.basicConfig(
    level=logging.DEBUG,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('importacion_bbva.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# Colores para terminal
class Colors:
    HEADER = '\033[95m'
    OKBLUE = '\033[94m'
    OKCYAN = '\033[96m'
    OKGREEN = '\033[92m'
    WARNING = '\033[93m'
    FAIL = '\033[91m'
    ENDC = '\033[0m'
    BOLD = '\033[1m'
    UNDERLINE = '\033[4m'

class ImportadorBBVA:
    """Clase principal para importar movimientos desde JSON"""
    
    def __init__(self, test_mode=False):
        self.test_mode = test_mode
        self.cuenta_bbva = None
        self.movimientos = []
        self.procesados = 0
        self.errores = 0
        self.duplicados = 0
        self.omitidos = 0
        self.log_operaciones = []
        self.memoria_sistema = None  # Se inicializar√° despu√©s
        self.modo_duplicados = None  # 'omitir', 'sobrescribir', 'preguntar'
        
    def iniciar(self):
        """Flujo principal del importador"""
        print(f"{Colors.HEADER}{'='*60}{Colors.ENDC}")
        print(f"{Colors.BOLD}IMPORTADOR DE MOVIMIENTOS BANCARIOS BBVA v0.8.5{Colors.ENDC}")
        print(f"{Colors.HEADER}{'='*60}{Colors.ENDC}\n")
        
        if self.test_mode:
            print(f"{Colors.WARNING}‚ö†Ô∏è  MODO TEST ACTIVADO - No se guardar√°n cambios{Colors.ENDC}\n")
        
        # Inicializar sistema de memoria para aprendizaje
        try:
            from sistema_memoria import MemoriaPatrones
            self.memoria_sistema = MemoriaPatrones()
            print(f"{Colors.OKGREEN}‚úì Sistema de memoria inicializado{Colors.ENDC}")
        except Exception as e:
            print(f"{Colors.WARNING}‚ö†Ô∏è  Sistema de memoria no disponible: {e}{Colors.ENDC}")
        
        # Verificar cuenta BBVA
        if not self.verificar_cuenta_bbva():
            return
        
        # Cargar archivo JSON
        if not self.cargar_datos():
            return
        
        # Mostrar resumen
        self.mostrar_resumen_inicial()
        
        # Verificar duplicados
        self.verificar_duplicados_iniciales()
        
        # Preguntar por procesamiento masivo
        modo_masivo = self.preguntar_modo_masivo()
        
        # Procesar movimientos
        self.procesar_movimientos(modo_masivo)
        
        # Mostrar estad√≠sticas finales
        self.mostrar_estadisticas_finales()
        
        # Exportar log
        self.exportar_log()
        
    def verificar_cuenta_bbva(self):
        """Verifica que existe la cuenta TDB BBVA 5019"""
        print(f"{Colors.OKBLUE}Verificando cuenta bancaria...{Colors.ENDC}")
        
        try:
            self.cuenta_bbva = Cuenta.objects.get(nombre="TDB BBVA 5019")
            print(f"{Colors.OKGREEN}‚úì Trabajando con Cuenta: {self.cuenta_bbva.nombre}{Colors.ENDC}")
            # El saldo es un m√©todo en el modelo, no una propiedad
            saldo = self.cuenta_bbva.saldo() if hasattr(self.cuenta_bbva.saldo, '__call__') else self.cuenta_bbva.saldo
            saldo = float(saldo) if saldo else 0.0
            print(f"  Saldo actual: ${saldo:,.2f}")
            print(f"  Naturaleza: {self.cuenta_bbva.naturaleza}")
            print()
            return True
        except Cuenta.DoesNotExist:
            print(f"{Colors.FAIL}‚úó Error: No se encontr√≥ la cuenta 'TDB BBVA 5019'{Colors.ENDC}")
            crear = input("¬øDesea crearla ahora? (s/n): ").lower()
            if crear == 's':
                return self.crear_cuenta_bbva()
            return False
        
    def crear_cuenta_bbva(self):
        """Crea la cuenta BBVA si no existe"""
        try:
            tipo_deb = TipoCuenta.objects.get(codigo='DEB')
            self.cuenta_bbva = Cuenta.objects.create(
                nombre="TDB BBVA 5019",
                tipo=tipo_deb,
                naturaleza='DEUDORA',
                es_medio_pago=True,
                moneda='MXN',
                saldo_inicial=0
            )
            print(f"{Colors.OKGREEN}‚úì Cuenta creada exitosamente{Colors.ENDC}")
            return True
        except Exception as e:
            print(f"{Colors.FAIL}‚úó Error al crear cuenta: {e}{Colors.ENDC}")
            return False
    
    def cargar_datos(self):
        """Carga el archivo JSON con los movimientos"""
        # Buscar archivos JSON disponibles
        json_files = []
        
        # Buscar en directorio actual
        for file in glob.glob("*.json"):
            json_files.append(file)
        
        # Buscar en scripts_cli/output/
        output_dir = "scripts_cli/output"
        if os.path.exists(output_dir):
            for file in glob.glob(f"{output_dir}/*.json"):
                json_files.append(file)
        
        if not json_files:
            print(f"{Colors.FAIL}No se encontraron archivos JSON{Colors.ENDC}")
            return False
        
        # Ordenar por fecha de modificaci√≥n (m√°s reciente primero)
        json_files.sort(key=lambda x: os.path.getmtime(x), reverse=True)
        
        print(f"{Colors.HEADER}üìÅ Archivos JSON disponibles:{Colors.ENDC}")
        print(f"{Colors.HEADER}{'='*60}{Colors.ENDC}")
        
        for i, file in enumerate(json_files, 1):
            file_time = datetime.fromtimestamp(os.path.getmtime(file))
            file_size = os.path.getsize(file) / 1024  # KB
            
            if i == 1:  # M√°s reciente
                print(f"{Colors.OKGREEN}[{i}] {file}{Colors.ENDC} {Colors.BOLD}‚Üê M√ÅS RECIENTE{Colors.ENDC}")
                print(f"    üìÖ {file_time.strftime('%d/%m/%Y %H:%M:%S')} | üì¶ {file_size:.1f} KB")
            else:
                print(f"{Colors.OKCYAN}[{i}] {file}{Colors.ENDC}")
                print(f"    üìÖ {file_time.strftime('%d/%m/%Y %H:%M:%S')} | üì¶ {file_size:.1f} KB")
        
        print(f"{Colors.HEADER}{'='*60}{Colors.ENDC}")
        
        while True:
            try:
                opcion = input(f"\n{Colors.OKCYAN}Seleccione archivo [1-{len(json_files)}] o ruta absoluta: {Colors.ENDC}").strip()
                
                if not opcion:  # Enter = usar el m√°s reciente
                    archivo_path = json_files[0]
                    break
                elif opcion.isdigit():
                    idx = int(opcion) - 1
                    if 0 <= idx < len(json_files):
                        archivo_path = json_files[idx]
                        break
                    else:
                        print(f"{Colors.WARNING}N√∫mero fuera de rango{Colors.ENDC}")
                elif os.path.exists(opcion):
                    archivo_path = opcion
                    break
                else:
                    print(f"{Colors.WARNING}Archivo no encontrado: {opcion}{Colors.ENDC}")
            except (ValueError, KeyboardInterrupt):
                print(f"{Colors.WARNING}Opci√≥n inv√°lida{Colors.ENDC}")
                continue
        
        try:
            with open(archivo_path, 'r', encoding='utf-8') as f:
                data = json.load(f)
            
            self.movimientos = data.get('movimientos', [])
            self.metadata = data.get('metadata', {})
            
            print(f"{Colors.OKGREEN}‚úì Archivo cargado correctamente{Colors.ENDC}")
            print(f"{Colors.OKCYAN}Se detectaron {len(self.movimientos)} movimientos{Colors.ENDC}\n")
            
            logger.info(f"Archivo cargado: {archivo_path}, {len(self.movimientos)} movimientos")
            return True
            
        except FileNotFoundError:
            print(f"{Colors.FAIL}‚úó Error: Archivo no encontrado{Colors.ENDC}")
            logger.error(f"Archivo no encontrado: {archivo_path}")
            return False
        except json.JSONDecodeError as e:
            print(f"{Colors.FAIL}‚úó Error: JSON inv√°lido - {e}{Colors.ENDC}")
            logger.error(f"JSON inv√°lido: {e}")
            return False
        except Exception as e:
            print(f"{Colors.FAIL}‚úó Error inesperado: {e}{Colors.ENDC}")
            logger.error(f"Error inesperado: {e}")
            return False
    
    def verificar_duplicados_iniciales(self):
        """Verifica si hay transacciones duplicadas en la BD"""
        duplicados_encontrados = []
        
        print(f"\n{Colors.OKBLUE}üîç Verificando duplicados...{Colors.ENDC}")
        
        for mov in self.movimientos:
            fecha = mov.get('fecha')
            monto = mov.get('monto')
            ref_bancaria = mov.get('referencia_bancaria', '')
            descripcion = mov.get('descripcion', '')[:50]
            
            # Buscar duplicados por fecha + monto ABSOLUTO + referencia
            # Comparamos valores absolutos porque el signo puede variar seg√∫n el contexto
            from django.db.models import Q
            monto_abs = abs(Decimal(str(monto)))
            
            query = Transaccion.objects.filter(
                fecha=fecha
            ).filter(
                Q(monto=monto_abs) | Q(monto=-monto_abs)
            )
            
            if ref_bancaria:
                query = query.filter(referencia_bancaria=ref_bancaria)
            
            if query.exists():
                duplicados_encontrados.append({
                    'fecha': fecha,
                    'monto': monto,
                    'referencia': ref_bancaria,
                    'descripcion': descripcion,
                    'transaccion_id': query.first().id
                })
        
        if duplicados_encontrados:
            print(f"\n{Colors.WARNING}‚ö†Ô∏è  Se encontraron {len(duplicados_encontrados)} posibles duplicados{Colors.ENDC}")
            print(f"\n{Colors.OKCYAN}Primeros 5 duplicados:{Colors.ENDC}")
            for dup in duplicados_encontrados[:5]:
                print(f"  ‚Ä¢ {dup['fecha']} | ${dup['monto']:,.2f} | {dup['descripcion']}")
            
            print(f"\n{Colors.WARNING}¬øC√≥mo manejar duplicados?{Colors.ENDC}")
            print("1) Omitir duplicados (no importar)")
            print("2) Sobrescribir duplicados (actualizar existentes)")
            print("3) Preguntar para cada uno")
            print("4) Importar de todos modos (puede crear duplicados)")
            
            while True:
                opcion = input(f"\n{Colors.OKCYAN}Seleccione opci√≥n (1/2/3/4): {Colors.ENDC}").strip()
                if opcion == '1':
                    self.modo_duplicados = 'omitir'
                    print(f"{Colors.OKGREEN}‚úì Se omitir√°n los duplicados{Colors.ENDC}")
                    break
                elif opcion == '2':
                    self.modo_duplicados = 'sobrescribir'
                    print(f"{Colors.WARNING}‚ö†Ô∏è  Se sobrescribir√°n los duplicados{Colors.ENDC}")
                    break
                elif opcion == '3':
                    self.modo_duplicados = 'preguntar'
                    print(f"{Colors.OKGREEN}‚úì Se preguntar√° para cada duplicado{Colors.ENDC}")
                    break
                elif opcion == '4':
                    self.modo_duplicados = None
                    print(f"{Colors.WARNING}‚ö†Ô∏è  Se importar√°n todos (puede crear duplicados){Colors.ENDC}")
                    break
                else:
                    print(f"{Colors.FAIL}Opci√≥n inv√°lida{Colors.ENDC}")
        else:
            print(f"{Colors.OKGREEN}‚úì No se encontraron duplicados{Colors.ENDC}")
            self.modo_duplicados = None
    
    def verificar_duplicado_individual(self, movimiento):
        """Verifica si un movimiento espec√≠fico es duplicado"""
        fecha = movimiento.get('fecha')
        monto = movimiento.get('monto')
        ref_bancaria = movimiento.get('referencia_bancaria', '')
        
        # Usar la misma l√≥gica que en verificar_duplicados_iniciales
        # Comparar valores absolutos porque el signo puede variar
        from django.db.models import Q
        monto_abs = abs(Decimal(str(monto)))
        
        query = Transaccion.objects.filter(
            fecha=fecha
        ).filter(
            Q(monto=monto_abs) | Q(monto=-monto_abs)
        )
        
        if ref_bancaria:
            query = query.filter(referencia_bancaria=ref_bancaria)
        
        return query.first() if query.exists() else None
    
    def mostrar_resumen_inicial(self):
        """Muestra resumen de los movimientos cargados"""
        print(f"{Colors.HEADER}{'='*60}{Colors.ENDC}")
        print(f"{Colors.BOLD}RESUMEN DE MOVIMIENTOS A IMPORTAR{Colors.ENDC}")
        print(f"{Colors.HEADER}{'='*60}{Colors.ENDC}")
        
        # Contar por tipo
        tipos = {}
        for mov in self.movimientos:
            tipo = mov.get('tipo', 'DESCONOCIDO')
            tipos[tipo] = tipos.get(tipo, 0) + 1
        
        for tipo, count in tipos.items():
            print(f"  {tipo}: {count} movimientos")
        
        print(f"\n  Total: {len(self.movimientos)} movimientos")
        print(f"{Colors.HEADER}{'='*60}{Colors.ENDC}\n")
    
    def preguntar_modo_masivo(self):
        """Pregunta si procesar todos los movimientos autom√°ticamente"""
        print(f"{Colors.WARNING}OPCIONES DE PROCESAMIENTO:{Colors.ENDC}")
        print("1. Revisar cada movimiento individualmente (recomendado)")
        print("2. Importar todos autom√°ticamente (confirmaci√≥n masiva)")
        print("3. Salir")
        
        opcion = input("\nSeleccione opci√≥n (1/2/3): ").strip()
        
        if opcion == '3':
            print(f"{Colors.WARNING}Proceso cancelado por el usuario{Colors.ENDC}")
            sys.exit(0)
        
        return opcion == '2'
    
    def procesar_movimientos(self, modo_masivo):
        """Procesa cada movimiento seg√∫n el modo seleccionado"""
        total = len(self.movimientos)
        
        for idx, movimiento in enumerate(self.movimientos, 1):
            if modo_masivo:
                # En modo masivo, siempre mostrar encabezado
                print(f"\n{Colors.HEADER}{'='*60}{Colors.ENDC}")
                print(f"{Colors.BOLD}Movimiento {idx}/{total}{Colors.ENDC}")
                print(f"{Colors.HEADER}{'='*60}{Colors.ENDC}")
                # Procesamiento autom√°tico
                self.procesar_movimiento_automatico(movimiento, idx)
            else:
                # En modo interactivo, el encabezado se muestra dentro de la funci√≥n
                # solo si el movimiento no es omitido
                resultado = self.procesar_movimiento_interactivo(movimiento, idx)
                if resultado == 'exit':
                    print(f"\n{Colors.WARNING}Proceso interrumpido por el usuario{Colors.ENDC}")
                    break
    
    def procesar_movimiento_automatico(self, movimiento, numero):
        """Procesa un movimiento autom√°ticamente"""
        try:
            # Aplicar reglas contables y guardar
            transaccion = self.aplicar_reglas_contables(movimiento)
            
            if not self.test_mode:
                self.guardar_movimiento(transaccion)
            
            self.procesados += 1
            print(f"{Colors.OKGREEN}‚úì Movimiento {numero} procesado{Colors.ENDC}")
            
        except Exception as e:
            self.errores += 1
            print(f"{Colors.FAIL}‚úó Error en movimiento {numero}: {e}{Colors.ENDC}")
            logger.error(f"Error en movimiento {numero}: {e}")
    
    def procesar_movimiento_interactivo(self, movimiento, numero):
        """Procesa un movimiento de forma interactiva"""
        # Verificar si es duplicado ANTES de mostrar cualquier cosa
        transaccion_existente = self.verificar_duplicado_individual(movimiento)
        
        if transaccion_existente and self.modo_duplicados:
            if self.modo_duplicados == 'omitir':
                # No mostrar el encabezado del movimiento, solo el mensaje de omisi√≥n
                print(f"\n{Colors.WARNING}‚è≠Ô∏è  Movimiento {numero}/{len(self.movimientos)} omitido (duplicado){Colors.ENDC}")
                print(f"    Fecha: {movimiento.get('fecha')} | Monto: ${movimiento.get('monto'):,.2f}")
                print(f"    Descripci√≥n: {movimiento.get('descripcion', '')[:50]}")
                self.omitidos += 1
                self.log_operaciones.append({
                    'numero': numero,
                    'fecha': movimiento.get('fecha'),
                    'monto': movimiento.get('monto'),
                    'estado': 'OMITIDO_DUPLICADO'
                })
                return 'omitido'
            
            elif self.modo_duplicados == 'preguntar':
                print(f"\n{Colors.WARNING}‚ö†Ô∏è  POSIBLE DUPLICADO DETECTADO{Colors.ENDC}")
                print(f"ID existente: {transaccion_existente.id}")
                print(f"Fecha: {transaccion_existente.fecha}")
                print(f"Monto: ${transaccion_existente.monto:,.2f}")
                print(f"Descripci√≥n: {transaccion_existente.descripcion[:50]}")
                
                print(f"\n{Colors.WARNING}¬øQu√© hacer con este duplicado?{Colors.ENDC}")
                print("1) Omitir (no importar)")
                print("2) Sobrescribir (actualizar existente)")
                print("3) Importar de todos modos (crear duplicado)")
                
                while True:
                    opcion_dup = input(f"{Colors.OKCYAN}Seleccione (1/2/3): {Colors.ENDC}").strip()
                    if opcion_dup == '1':
                        self.omitidos += 1
                        print(f"{Colors.WARNING}‚è≠Ô∏è  Movimiento omitido{Colors.ENDC}")
                        return 'omitido'
                    elif opcion_dup == '2':
                        movimiento['transaccion_id_actualizar'] = transaccion_existente.id
                        print(f"{Colors.WARNING}üîÑ Se actualizar√° transacci√≥n existente{Colors.ENDC}")
                        break
                    elif opcion_dup == '3':
                        print(f"{Colors.WARNING}‚ö†Ô∏è  Se crear√° duplicado{Colors.ENDC}")
                        break
                    else:
                        print(f"{Colors.FAIL}Opci√≥n inv√°lida{Colors.ENDC}")
            
            elif self.modo_duplicados == 'sobrescribir':
                movimiento['transaccion_id_actualizar'] = transaccion_existente.id
                print(f"\n{Colors.WARNING}üîÑ Actualizando transacci√≥n existente ID: {transaccion_existente.id}{Colors.ENDC}")
        
        # Mostrar encabezado del movimiento (solo si no fue omitido antes)
        print(f"\n{Colors.HEADER}{'='*60}{Colors.ENDC}")
        print(f"{Colors.BOLD}Movimiento {numero}/{len(self.movimientos)}{Colors.ENDC}")
        print(f"{Colors.HEADER}{'='*60}{Colors.ENDC}")
        
        # Mostrar datos actuales
        self.mostrar_movimiento_tabla(movimiento)
        
        # PASO 1: Revisar clasificaci√≥n IA si existe
        feedback_clasificacion = None
        if 'decision_ia' in movimiento and movimiento['decision_ia']:
            feedback_clasificacion = self.revisar_clasificacion_ia(movimiento)
        
        # Si hubo feedback sobre clasificaci√≥n IA, aplicarlo
        if feedback_clasificacion and feedback_clasificacion.get('accion') == 'correccion':
            movimiento['tipo'] = feedback_clasificacion['clasificacion_correcta']['tipo']
            movimiento['categoria'] = feedback_clasificacion['clasificacion_correcta']['categoria']
        
        # PASO 2: ¬øLos campos son correctos?
        print(f"\n{Colors.HEADER}{'='*60}{Colors.ENDC}")
        print(f"{Colors.BOLD}VERIFICACI√ìN DE CAMPOS{Colors.ENDC}")
        print(f"{Colors.HEADER}{'='*60}{Colors.ENDC}")
        
        # Primero mostrar los campos actuales del movimiento
        print(f"\n{Colors.OKCYAN}Campos actuales del movimiento:{Colors.ENDC}")
        print(f"  üìÖ Fecha: {movimiento.get('fecha', '')}")
        print(f"  üìù Descripci√≥n: {movimiento.get('descripcion', '')[:60]}")
        print(f"  üí∞ Monto: ${movimiento.get('monto', 0):,.2f}")
        print(f"  üì§ Cuenta Origen: {movimiento.get('cuenta_origen', 'TDB BBVA 5019')}")
        print(f"  üì• Cuenta Destino: {movimiento.get('cuenta_destino', '-')}")
        print(f"  üìÅ Categor√≠a: {movimiento.get('categoria', 'SIN CLASIFICAR')}")
        print(f"  üè∑Ô∏è  Tipo: {movimiento.get('tipo', 'GASTO')}")
        
        # Aplicar reglas contables para mostrar vista previa
        transaccion_preview = self.aplicar_reglas_contables(movimiento)
        self.mostrar_vista_previa_contable(transaccion_preview)
        
        print(f"\n{Colors.OKCYAN}¬øLos campos son correctos?{Colors.ENDC}")
        print("1) ‚úÖ S√≠, todo correcto")
        print("2) üè¶ Editar solo cuenta vinculada")  
        print("3) ‚úèÔ∏è  Editar todos los campos")
        
        opcion_campos = input(f"{Colors.OKCYAN}Seleccione (1/2/3) [Enter=1]: {Colors.ENDC}").strip() or '1'
        
        movimiento_editado = movimiento.copy()
        
        if opcion_campos == '2':
            # Solo editar cuenta destino/vinculada
            cuenta_destino_actual = movimiento.get('cuenta_destino', '')
            
            while True:
                print(f"\n{Colors.OKCYAN}Ingresa cuenta vinculada (nombre/n√∫mero/9=ayuda/x=cancelar):{Colors.ENDC}")
                nueva_cuenta = input(f"Cuenta Destino [{cuenta_destino_actual}]: ").strip().lower()
                
                # Cancelar y regresar
                if nueva_cuenta == 'x':
                    print(f"{Colors.WARNING}Cancelado, regresando...{Colors.ENDC}")
                    break
                
                # Si presiona 9 o es un n√∫mero, mostrar lista
                elif nueva_cuenta == '9' or (nueva_cuenta.isdigit() and nueva_cuenta != '0'):
                    opcion_num = int(nueva_cuenta)
                    
                    # Mostrar lista de cuentas disponibles
                    print(f"\n{Colors.OKCYAN}{'='*60}{Colors.ENDC}")
                    print(f"{Colors.BOLD}üìö CUENTAS DISPONIBLES{Colors.ENDC}")
                    print(f"{Colors.OKCYAN}{'='*60}{Colors.ENDC}\n")
                    
                    try:
                        from core.models import Cuenta
                        cuentas = Cuenta.objects.all().order_by('id')
                        
                        if cuentas.exists():
                            # Crear diccionario ID -> nombre para b√∫squeda r√°pida
                            cuentas_dict = {}
                            
                            # Mostrar en 3 columnas con IDs
                            cuentas_list = list(cuentas)
                            num_cuentas = len(cuentas_list)
                            columnas = 3
                            
                            # Calcular filas necesarias
                            filas = (num_cuentas + columnas - 1) // columnas
                            
                            for i in range(filas):
                                fila = []
                                for j in range(columnas):
                                    idx = i + j * filas
                                    if idx < num_cuentas:
                                        cuenta = cuentas_list[idx]
                                        cuentas_dict[cuenta.id] = cuenta.nombre
                                        # Formato: [ID] Nombre (truncado a 18 chars)
                                        nombre_truncado = cuenta.nombre[:18]
                                        fila.append(f"[{cuenta.id:3}] {nombre_truncado:<18}")
                                print("  " + " | ".join(fila))
                            
                            print(f"\n{Colors.OKGREEN}Total: {num_cuentas} cuentas{Colors.ENDC}")
                            print(f"{Colors.WARNING}[  0] ‚Üí Crear nueva cuenta{Colors.ENDC}")
                            print(f"{Colors.OKCYAN}{'='*60}{Colors.ENDC}")
                            
                            # Si ya seleccion√≥ un n√∫mero v√°lido distinto de 9
                            if opcion_num != 9 and opcion_num > 0 and opcion_num in cuentas_dict:
                                nombre_seleccionado = cuentas_dict[opcion_num]
                                print(f"\n{Colors.OKGREEN}‚úì Seleccionaste: {nombre_seleccionado}{Colors.ENDC}")
                                movimiento_editado['cuenta_destino'] = nombre_seleccionado
                                break
                            
                            # Despu√©s de mostrar la lista, preguntar de nuevo
                            print(f"\n{Colors.BOLD}OPCIONES:{Colors.ENDC}")
                            print("‚Ä¢ Escribe el NOMBRE de la cuenta nueva")
                            print("‚Ä¢ Escribe el N√öMERO de la cuenta que eliges")
                            print("‚Ä¢ Escribe '0' para crear cuenta nueva")
                            print("‚Ä¢ Escribe '9' para ver la lista otra vez")
                            print("‚Ä¢ Escribe 'x' para cancelar")
                            
                            seleccion = input(f"\n{Colors.OKCYAN}Tu elecci√≥n: {Colors.ENDC}").strip().lower()
                            
                            if seleccion == 'x':
                                print(f"{Colors.WARNING}Cancelado{Colors.ENDC}")
                                break
                            elif seleccion == '9':
                                continue  # Mostrar lista otra vez
                            elif seleccion == '0':
                                nombre_nueva = input("Nombre de la nueva cuenta: ").strip()
                                if nombre_nueva:
                                    movimiento_editado['cuenta_destino'] = nombre_nueva
                                    break
                            elif seleccion.isdigit():
                                id_seleccionado = int(seleccion)
                                if id_seleccionado in cuentas_dict:
                                    nombre_seleccionado = cuentas_dict[id_seleccionado]
                                    print(f"{Colors.OKGREEN}‚úì Seleccionaste: {nombre_seleccionado}{Colors.ENDC}")
                                    movimiento_editado['cuenta_destino'] = nombre_seleccionado
                                    break
                                else:
                                    print(f"{Colors.FAIL}ID no v√°lido{Colors.ENDC}")
                                    continue
                            else:
                                # Asumimos que escribi√≥ un nombre de cuenta
                                movimiento_editado['cuenta_destino'] = seleccion
                                break
                        else:
                            print(f"{Colors.WARNING}No hay cuentas registradas{Colors.ENDC}")
                            nombre_nueva = input("Nombre de la nueva cuenta: ").strip()
                            if nombre_nueva:
                                movimiento_editado['cuenta_destino'] = nombre_nueva
                                break
                            
                    except Exception as e:
                        print(f"{Colors.FAIL}Error al obtener cuentas: {e}{Colors.ENDC}")
                        continue
                    
                # Si escribi√≥ '0' para crear nueva
                elif nueva_cuenta == '0':
                    nombre_nueva = input("Nombre de la nueva cuenta: ").strip()
                    if nombre_nueva:
                        movimiento_editado['cuenta_destino'] = nombre_nueva
                        break
                        
                # Si escribi√≥ un nombre directamente (no es n√∫mero ni comandos especiales)
                elif nueva_cuenta and not nueva_cuenta.isdigit():
                    # Capitalizar primera letra para consistencia
                    movimiento_editado['cuenta_destino'] = nueva_cuenta.title()
                    break
                    
                # Si presion√≥ Enter (mantener actual)
                elif not nueva_cuenta:
                    break
                
        elif opcion_campos == '3':
            # Editar todos los campos
            print(f"\n{Colors.WARNING}Editar campos (Enter para mantener valor actual):{Colors.ENDC}")
            desc = input(f"Descripci√≥n [{movimiento.get('descripcion', '')}]: ").strip()
            if desc:
                movimiento_editado['descripcion'] = desc
                
            monto_str = input(f"Monto [{movimiento.get('monto', 0)}]: ").strip()
            if monto_str:
                try:
                    movimiento_editado['monto'] = float(monto_str)
                except ValueError:
                    print(f"{Colors.FAIL}Monto inv√°lido, manteniendo original{Colors.ENDC}")
                    
            cuenta_origen = input(f"Cuenta Origen [{movimiento.get('cuenta_origen', '')}]: ").strip()
            if cuenta_origen:
                movimiento_editado['cuenta_origen'] = cuenta_origen
                
            cuenta_destino = input(f"Cuenta Destino [{movimiento.get('cuenta_destino', '')}]: ").strip()
            if cuenta_destino:
                movimiento_editado['cuenta_destino'] = cuenta_destino
                
            categoria = input(f"Categor√≠a [{movimiento.get('categoria', '')}]: ").strip()
            if categoria:
                movimiento_editado['categoria'] = categoria
        
        # PASO 3: ¬øVer JSON completo?
        ver_json = input(f"\n{Colors.OKCYAN}¬øVer JSON completo? (1=S√≠, Enter=No): {Colors.ENDC}").strip()
        if ver_json == '1':
            print(f"\n{Colors.HEADER}JSON del movimiento:{Colors.ENDC}")
            print(json.dumps(movimiento_editado, indent=2, ensure_ascii=False))
        
        # Aplicar reglas contables con movimiento editado
        try:
            transaccion = self.aplicar_reglas_contables(movimiento_editado)
            
            # Mostrar vista previa contable final
            print(f"\n{Colors.OKGREEN}Vista previa contable FINAL:{Colors.ENDC}")
            self.mostrar_vista_previa_contable(transaccion)
            
            # PASO 4: Confirmar guardado
            while True:
                print(f"\n{Colors.WARNING}¬øQu√© deseas hacer?{Colors.ENDC}")
                print("1) üíæ Guardar transacci√≥n")
                print("2) ‚úèÔ∏è  Editar nuevamente")  
                print("3) üö™ Salir del importador")
                print("4) ‚ùì Ayuda")
                
                opcion = input(f"{Colors.OKCYAN}Seleccione (1/2/3/4) [Enter=1]: {Colors.ENDC}").strip() or '1'
                
                if opcion == '1':
                    # Doble confirmaci√≥n para guardar
                    print(f"\n{Colors.WARNING}‚ö†Ô∏è  CONFIRMACI√ìN FINAL{Colors.ENDC}")
                    print(f"Est√°s a punto de guardar esta transacci√≥n en la base de datos.")
                    confirmar_final = input(f"{Colors.WARNING}¬øConfirmar guardado? (1=S√≠, 2=No) [Enter=1]: {Colors.ENDC}").strip() or '1'
                    
                    if confirmar_final == '1':
                        # Propagar ID de actualizaci√≥n si existe
                        if 'transaccion_id_actualizar' in movimiento:
                            transaccion['transaccion_id_actualizar'] = movimiento['transaccion_id_actualizar']
                        
                        if not self.test_mode:
                            self.guardar_movimiento(transaccion)
                        self.procesados += 1
                        
                        # Registrar feedback en memoria si hubo revisi√≥n de IA
                        if feedback_clasificacion and self.memoria_sistema:
                            self.registrar_feedback_memoria(movimiento_editado, feedback_clasificacion)
                        
                        print(f"{Colors.OKGREEN}‚úì Movimiento guardado exitosamente{Colors.ENDC}")
                        return 'ok'
                    else:
                        print(f"{Colors.WARNING}Guardado cancelado, regresando al men√∫...{Colors.ENDC}")
                        continue  # Vuelve a mostrar las 4 opciones
                        
                elif opcion == '2':
                    print(f"{Colors.WARNING}Re-editando movimiento...{Colors.ENDC}")
                    return self.procesar_movimiento_interactivo(movimiento, numero)
                    
                elif opcion == '3':
                    print(f"\n{Colors.WARNING}¬øSeguro que deseas salir?{Colors.ENDC}")
                    confirmar_salir = input(f"1=S√≠ salir, 2=No, continuar [Enter=2]: ").strip() or '2'
                    if confirmar_salir == '1':
                        return 'exit'
                    else:
                        continue  # Vuelve a mostrar las 4 opciones
                        
                elif opcion == '4':
                    # Mostrar ayuda
                    print(f"\n{Colors.OKCYAN}{'='*60}{Colors.ENDC}")
                    print(f"{Colors.BOLD}üìö AYUDA - Opciones disponibles{Colors.ENDC}")
                    print(f"{Colors.OKCYAN}{'='*60}{Colors.ENDC}")
                    print(f"\n{Colors.OKGREEN}1) Guardar transacci√≥n:{Colors.ENDC}")
                    print("   ‚Ä¢ Guarda el movimiento en la base de datos")
                    print("   ‚Ä¢ Requiere confirmaci√≥n adicional por seguridad")
                    print("   ‚Ä¢ Una vez guardado, contin√∫a con el siguiente movimiento")
                    
                    print(f"\n{Colors.WARNING}2) Editar nuevamente:{Colors.ENDC}")
                    print("   ‚Ä¢ Te regresa al inicio de este movimiento")
                    print("   ‚Ä¢ Puedes cambiar cualquier campo")
                    print("   ‚Ä¢ √ötil si detectaste un error")
                    
                    print(f"\n{Colors.FAIL}3) Salir del importador:{Colors.ENDC}")
                    print("   ‚Ä¢ Termina el proceso de importaci√≥n")
                    print("   ‚Ä¢ Los movimientos ya guardados permanecen")
                    print("   ‚Ä¢ Puedes continuar despu√©s desde donde quedaste")
                    
                    print(f"\n{Colors.OKCYAN}{'='*60}{Colors.ENDC}")
                    input(f"\n{Colors.OKCYAN}Presiona Enter para continuar...{Colors.ENDC}")
                    # Despu√©s de la ayuda, vuelve a mostrar las opciones
                    
                else:
                    print(f"{Colors.FAIL}Opci√≥n inv√°lida. Por favor selecciona 1, 2, 3 o 4{Colors.ENDC}")
                    
        except Exception as e:
            self.errores += 1
            print(f"{Colors.FAIL}‚úó Error: {e}{Colors.ENDC}")
            logger.error(f"Error en movimiento {numero}: {e}")
            return 'error'
    
    def mostrar_movimiento_tabla(self, movimiento):
        """Muestra el movimiento en formato tabla"""
        # Usar formato simple sin PrettyTable para evitar dependencias
        print(f"\n{Colors.OKCYAN}Datos del movimiento:{Colors.ENDC}")
        print("+" + "-"*20 + "+" + "-"*35 + "+")
        print(f"| {'Campo':<18} | {'Valor':<33} |")
        print("+" + "-"*20 + "+" + "-"*35 + "+")
        
        # Solo mostrar campos que coinciden con el modelo de BD
        # Manejar campos que podr√≠an ser None
        descripcion = movimiento.get('descripcion', '') or ''
        cuenta_origen = movimiento.get('cuenta_origen', '') or ''
        cuenta_destino = movimiento.get('cuenta_destino', '') or ''
        categoria = movimiento.get('categoria', '') or ''
        ref_bancaria = movimiento.get('referencia_bancaria', '') or ''
        
        campos = [
            ('Fecha', movimiento.get('fecha', '')),
            ('Descripci√≥n', descripcion[:33]),
            ('Tipo', movimiento.get('tipo', '')),
            ('Monto', f"${movimiento.get('monto', 0):,.2f}"),
            ('Cuenta Origen', cuenta_origen[:33]),
            ('Cuenta Destino', cuenta_destino[:33]),
            ('Categor√≠a', categoria[:33]),
            ('Ref. Bancaria', ref_bancaria[:33])
        ]
        
        for campo, valor in campos:
            print(f"| {campo:<18} | {valor:<33} |")
        
        print("+" + "-"*20 + "+" + "-"*35 + "+")
    
    def editar_movimiento(self, movimiento):
        """Permite editar campos del movimiento"""
        print(f"\n{Colors.WARNING}Editar campos (Enter para mantener valor actual):{Colors.ENDC}")
        
        movimiento_editado = movimiento.copy()
        
        # Editar cada campo
        campos_editables = [
            ('descripcion', 'Descripci√≥n'),
            ('monto', 'Monto'),
            ('cuenta_origen', 'Cuenta Origen'),
            ('cuenta_destino', 'Cuenta Destino'),
            ('categoria', 'Categor√≠a')
        ]
        
        for campo, nombre in campos_editables:
            valor_actual = movimiento_editado.get(campo, '')
            nuevo_valor = input(f"{nombre} [{valor_actual}]: ").strip()
            
            if nuevo_valor:
                if campo == 'monto':
                    try:
                        movimiento_editado[campo] = float(nuevo_valor.replace(',', '').replace('$', ''))
                    except ValueError:
                        print(f"{Colors.FAIL}Monto inv√°lido, manteniendo valor original{Colors.ENDC}")
                else:
                    movimiento_editado[campo] = nuevo_valor
                    
                    # Verificar si necesita crear nueva cuenta/categor√≠a
                    if campo in ['cuenta_origen', 'cuenta_destino']:
                        self.verificar_crear_cuenta(nuevo_valor)
                    elif campo == 'categoria':
                        self.verificar_crear_categoria(nuevo_valor)
        
        return movimiento_editado
    
    def verificar_crear_cuenta(self, nombre_cuenta):
        """Verifica si existe la cuenta y la crea si es necesario"""
        if not nombre_cuenta or nombre_cuenta == '-':
            return None
            
        try:
            cuenta = Cuenta.objects.get(nombre=nombre_cuenta)
            return cuenta
        except Cuenta.DoesNotExist:
            # Intentar crear nueva cuenta
            return self.crear_nueva_cuenta(nombre_cuenta)
    
    def crear_nueva_cuenta(self, nombre):
        """Crea una nueva cuenta con asistente interactivo"""
        try:
            print(f"\n{Colors.WARNING}‚ö†Ô∏è  Cuenta '{nombre}' no existe{Colors.ENDC}")
            confirmar = input(f"¬øCrear nueva cuenta? (1=S√≠, 2=No) [Enter=1]: ").strip() or '1'
            
            if confirmar != '1':
                print(f"{Colors.WARNING}Cuenta no creada{Colors.ENDC}")
                return None
            
            print(f"\n{Colors.OKCYAN}‚ïê‚ïê‚ïê Configuraci√≥n: {nombre} ‚ïê‚ïê‚ïê{Colors.ENDC}")
            
            # Determinar defaults inteligentes
            nombre_upper = nombre.upper()
            
            # Default de naturaleza y tipo basado en el nombre
            if 'TDC' in nombre_upper:
                naturaleza_default = 'ACREEDORA'
                tipo_default = 'CRE'
            elif 'TDB' in nombre_upper or 'BANCO' in nombre_upper:
                naturaleza_default = 'DEUDORA'
                tipo_default = 'DEB'
            elif 'INGRESO' in nombre_upper or 'RENTA' in nombre_upper:
                naturaleza_default = 'ACREEDORA'
                tipo_default = 'ING'
            elif any(serv in nombre_upper for serv in ['CFE', 'TELMEX', 'IZZI', 'TOTALPLAY', 'GAS']):
                naturaleza_default = 'ACREEDORA'
                tipo_default = 'SER'
            else:
                naturaleza_default = 'DEUDORA'
                tipo_default = 'DEB'
            
            # Naturaleza simplificada
            while True:
                print(f"\nNaturaleza (default: {naturaleza_default}):")
                print("1) DEUDORA")
                print("2) ACREEDORA")
                print("3) ‚ùì Ayuda - ¬øQu√© significa esto?")
                nat_opcion = input("Seleccione 1/2/3 [Enter=default]: ").strip()
                
                if nat_opcion == '3':
                    # Mostrar ayuda sobre naturalezas
                    print(f"\n{Colors.OKCYAN}{'='*60}{Colors.ENDC}")
                    print(f"{Colors.BOLD}üìö NATURALEZA DE LAS CUENTAS - Explicaci√≥n Simple{Colors.ENDC}")
                    print(f"{Colors.OKCYAN}{'='*60}{Colors.ENDC}")
                    
                    print(f"\n{Colors.OKGREEN}DEUDORA (Lo que tienes o gastas):{Colors.ENDC}")
                    print("üìå Cuentas donde TIENES dinero o GASTAS dinero")
                    print("   ‚Ä¢ Cuentas de banco (d√©bito)")
                    print("   ‚Ä¢ Efectivo")
                    print("   ‚Ä¢ Gastos (comida, renta, servicios)")
                    print("   ‚Ä¢ Lo que otros te deben")
                    print("   ‚û°Ô∏è  Aumentan cuando ENTRA dinero o GASTAS")
                    
                    print(f"\n{Colors.WARNING}ACREEDORA (Lo que debes o ganas):{Colors.ENDC}")
                    print("üìå Cuentas donde DEBES dinero o GANAS dinero")
                    print("   ‚Ä¢ Tarjetas de cr√©dito")
                    print("   ‚Ä¢ Pr√©stamos e hipotecas")
                    print("   ‚Ä¢ Ingresos (sueldo, rentas)")
                    print("   ‚Ä¢ Lo que debes a otros")
                    print("   ‚û°Ô∏è  Aumentan cuando DEBES m√°s o GANAS dinero")
                    
                    print(f"\n{Colors.BOLD}üí° REGLA SIMPLE:{Colors.ENDC}")
                    print("‚Ä¢ ¬øEs dinero que TIENES? ‚Üí DEUDORA")
                    print("‚Ä¢ ¬øEs dinero que DEBES? ‚Üí ACREEDORA")
                    print("‚Ä¢ ¬øEs un GASTO? ‚Üí DEUDORA")
                    print("‚Ä¢ ¬øEs un INGRESO? ‚Üí ACREEDORA")
                    
                    print(f"\n{Colors.OKCYAN}{'='*60}{Colors.ENDC}")
                    input(f"\n{Colors.OKCYAN}Presiona Enter para continuar...{Colors.ENDC}")
                    continue  # Volver a mostrar las opciones
                    
                elif nat_opcion == '2':
                    naturaleza = 'ACREEDORA'
                    break
                elif nat_opcion == '1':
                    naturaleza = 'DEUDORA'
                    break
                else:
                    naturaleza = naturaleza_default
                    break
            
            # Tipo de cuenta simplificado
            print(f"\nTipo (default: {tipo_default}):")
            print("1) DEB - D√©bito")
            print("2) CRE - Cr√©dito")
            print("3) SER - Servicios")
            print("4) ING - Ingresos")
            tipo_opcion = input("Seleccione 1-4 [Enter=default]: ").strip()
            tipo_map = {'1': 'DEB', '2': 'CRE', '3': 'SER', '4': 'ING'}
            tipo_codigo = tipo_map.get(tipo_opcion, tipo_default) if tipo_opcion else tipo_default
            
            try:
                tipo = TipoCuenta.objects.get(codigo=tipo_codigo)
            except TipoCuenta.DoesNotExist:
                print(f"{Colors.WARNING}Tipo no encontrado, usando DEB{Colors.ENDC}")
                tipo = TipoCuenta.objects.get(codigo='DEB')
            
            # Medio de pago (default siempre No)
            default_medio_pago = '2'  # Siempre default a No
            print(f"\n¬øEs medio de pago? (default: No):")
            print("1) S√≠")
            print("2) No")
            medio_opcion = input("Seleccione 1/2 [Enter=default]: ").strip().lower()
            
            # Manejar diferentes formas de responder (1, 2, si, no, yes, NO, etc.)
            if medio_opcion == '':
                es_medio_pago = (default_medio_pago == '1')
            elif medio_opcion in ['1', 's', 'si', 's√≠', 'yes', 'y']:
                es_medio_pago = True
            elif medio_opcion in ['2', 'n', 'no', '0']:
                es_medio_pago = False
            else:
                # Si no entendemos la respuesta, usar el default
                print(f"{Colors.WARNING}Respuesta no reconocida, usando default{Colors.ENDC}")
                es_medio_pago = (default_medio_pago == '1')
            
            # Referencia/N√∫mero de cuenta (opcional, simplificado)
            referencia = input("\nReferencia bancaria [Enter=omitir]: ").strip()
            
            # Crear la cuenta - usar string vac√≠o si no hay referencia para evitar NULL constraint
            cuenta = Cuenta.objects.create(
                nombre=nombre,
                tipo=tipo,
                naturaleza=naturaleza,
                medio_pago=es_medio_pago,  # Campo correcto es medio_pago
                moneda='MXN',
                saldo_inicial=0,
                referencia=referencia if referencia else ''  # String vac√≠o en lugar de None
            )
            
            print(f"{Colors.OKGREEN}‚úì Nueva cuenta creada exitosamente!{Colors.ENDC}")
            print(f"  Nombre: {cuenta.nombre}")
            print(f"  Tipo: {tipo.nombre} ({tipo.codigo})")
            print(f"  Naturaleza: {naturaleza}")
            print(f"  Medio de pago: {'S√≠' if es_medio_pago else 'No'}")
            if referencia:
                print(f"  Referencia: {referencia}")
            
            logger.info(f"Cuenta creada: {nombre} - Tipo: {tipo.codigo} - Naturaleza: {naturaleza}")
            return cuenta
            
        except Exception as e:
            print(f"{Colors.FAIL}Error al crear cuenta: {e}{Colors.ENDC}")
            logger.error(f"Error al crear cuenta {nombre}: {e}")
            return None
    
    def verificar_crear_categoria(self, nombre_categoria):
        """Verifica si existe la categor√≠a y la crea si es necesario"""
        if not nombre_categoria:
            return None
            
        try:
            categoria = Categoria.objects.get(nombre=nombre_categoria)
            return categoria
        except Categoria.DoesNotExist:
            print(f"{Colors.WARNING}¬°Esa categor√≠a se va a crear, conf√≠rmala!: {nombre_categoria}{Colors.ENDC}")
            confirmar = input("¬øCrear categor√≠a? (1=S√≠, 2=No) [Enter=1]: ").strip() or '1'
            
            if confirmar == '1':
                return self.crear_nueva_categoria(nombre_categoria)
            return None
    
    def crear_nueva_categoria(self, nombre):
        """Crea una nueva categor√≠a"""
        try:
            categoria = Categoria.objects.create(
                nombre=nombre,
                tipo='personal'
            )
            
            print(f"{Colors.OKGREEN}¬°Nueva categor√≠a creada!: {nombre}{Colors.ENDC}")
            logger.info(f"Categor√≠a creada: {nombre}")
            return categoria
            
        except Exception as e:
            print(f"{Colors.FAIL}Error al crear categor√≠a: {e}{Colors.ENDC}")
            logger.error(f"Error al crear categor√≠a {nombre}: {e}")
            return None
    
    def aplicar_reglas_contables(self, movimiento):
        """Aplica las reglas contables para generar la transacci√≥n"""
        # Determinar tipo de transacci√≥n
        tipo_mov = movimiento.get('tipo', 'GASTO')
        
        # Obtener o crear cuentas
        cuenta_origen_nombre = movimiento.get('cuenta_origen')
        cuenta_destino_nombre = movimiento.get('cuenta_destino')
        
        cuenta_origen = None
        cuenta_destino = None
        
        if cuenta_origen_nombre and cuenta_origen_nombre != '-':
            cuenta_origen = self.verificar_crear_cuenta(cuenta_origen_nombre)
        
        if cuenta_destino_nombre and cuenta_destino_nombre != '-':
            cuenta_destino = self.verificar_crear_cuenta(cuenta_destino_nombre)
        
        # Obtener o crear categor√≠a
        categoria_nombre = movimiento.get('categoria')
        categoria = None
        if categoria_nombre and categoria_nombre != 'SIN CLASIFICAR':
            categoria = self.verificar_crear_categoria(categoria_nombre)
        
        # Crear objeto transacci√≥n con campos que coinciden con el modelo
        transaccion_data = {
            'fecha': datetime.strptime(movimiento.get('fecha', '2025-01-01'), '%Y-%m-%d').date(),
            'descripcion': movimiento.get('descripcion', 'Importado desde BBVA')[:255],  # Limitar a 255 chars
            'monto': Decimal(str(movimiento.get('monto', 0))),
            'tipo': self.mapear_tipo_transaccion(tipo_mov),
            'cuenta_origen': cuenta_origen or self.cuenta_bbva,
            'cuenta_destino': cuenta_destino if cuenta_destino else None,
            'categoria': categoria,
            'estado': TransaccionEstado.LIQUIDADA,  # Usar el enum correcto
            'referencia_bancaria': movimiento.get('referencia_bancaria', '')[:100],  # Limitar a 100 chars
            'moneda': 'MXN',
            'conciliado': False,
            'ajuste': False
        }
        
        # Para transferencias, asegurar que ambas cuentas existan
        if tipo_mov == 'TRANSFERENCIA' and not cuenta_destino:
            transaccion_data['cuenta_destino'] = self.cuenta_bbva
        
        return transaccion_data
    
    def mapear_tipo_transaccion(self, tipo_str):
        """Mapea el tipo de string a TransaccionTipo"""
        mapeo = {
            'INGRESO': TransaccionTipo.INGRESO,
            'GASTO': TransaccionTipo.GASTO,
            'TRANSFERENCIA': TransaccionTipo.TRANSFERENCIA
        }
        return mapeo.get(tipo_str, TransaccionTipo.GASTO)
    
    def mostrar_vista_previa_contable(self, transaccion_data):
        """Muestra la vista previa del asiento contable"""
        print(f"\n{Colors.OKCYAN}Vista previa contable:{Colors.ENDC}")
        
        tipo = transaccion_data['tipo']
        monto = abs(transaccion_data['monto'])  # Usar valor absoluto para mostrar
        cuenta_origen = transaccion_data['cuenta_origen']
        cuenta_destino = transaccion_data['cuenta_destino']
        
        if tipo == TransaccionTipo.GASTO:
            # Gasto: Sale dinero de cuenta d√©bito (ABONO) y se registra gasto (CARGO)
            print(f"  CARGO:  {cuenta_destino.nombre if cuenta_destino else 'Gasto'} ${monto:,.2f}")
            print(f"  ABONO:  {cuenta_origen.nombre} ${monto:,.2f}")
        elif tipo == TransaccionTipo.INGRESO:
            # Ingreso: Entra dinero a cuenta d√©bito (CARGO) y se registra ingreso (ABONO)
            # CORRECCI√ìN: cuenta_origen es TDB BBVA que RECIBE dinero (CARGO)
            # cuenta_destino es la cuenta de ingreso que GENERA el ingreso (ABONO)
            print(f"  CARGO:  {cuenta_origen.nombre} ${monto:,.2f}")
            print(f"  ABONO:  {cuenta_destino.nombre if cuenta_destino else 'Ingreso'} ${monto:,.2f}")
        else:  # TRANSFERENCIA
            # Transferencia: Sale de una cuenta (ABONO) y entra a otra (CARGO)
            # De cuenta_origen (ABONO porque sale) a cuenta_destino (CARGO porque entra)
            print(f"  CARGO:  {cuenta_destino.nombre if cuenta_destino else cuenta_origen.nombre} ${monto:,.2f}")
            print(f"  ABONO:  {cuenta_origen.nombre} ${monto:,.2f}")
    
    @transaction.atomic
    def guardar_movimiento(self, transaccion_data):
        """Guarda o actualiza el movimiento en la base de datos"""
        try:
            # Verificar si es actualizaci√≥n
            if 'transaccion_id_actualizar' in transaccion_data:
                transaccion_id = transaccion_data.pop('transaccion_id_actualizar')
                transaccion = Transaccion.objects.get(id=transaccion_id)
                
                # Actualizar campos
                for key, value in transaccion_data.items():
                    setattr(transaccion, key, value)
                transaccion.save()
                
                self.log_operaciones.append({
                    'fecha': str(transaccion_data['fecha']),
                    'descripcion': transaccion_data['descripcion'],
                    'monto': float(transaccion_data['monto']),
                    'tipo': str(transaccion_data['tipo']),
                    'id_actualizado': transaccion.id,
                    'estado': 'ACTUALIZADO'
                })
                
                logger.info(f"Transacci√≥n actualizada: ID {transaccion.id}")
                self.duplicados += 1
                
            else:
                # Crear nueva transacci√≥n
                transaccion = Transaccion.objects.create(**transaccion_data)
                
                self.log_operaciones.append({
                    'fecha': str(transaccion_data['fecha']),
                    'descripcion': transaccion_data['descripcion'],
                    'monto': float(transaccion_data['monto']),
                    'tipo': str(transaccion_data['tipo']),
                    'id_generado': transaccion.id,
                    'estado': 'CREADO'
                })
                
                logger.info(f"Transacci√≥n guardada: ID {transaccion.id}")
            
        except Exception as e:
            logger.error(f"Error al guardar transacci√≥n: {e}")
            raise
    
    def mostrar_estadisticas_finales(self):
        """Muestra estad√≠sticas finales del proceso"""
        print(f"\n{Colors.HEADER}{'='*60}{Colors.ENDC}")
        print(f"{Colors.BOLD}RESUMEN FINAL{Colors.ENDC}")
        print(f"{Colors.HEADER}{'='*60}{Colors.ENDC}")
        
        print(f"  ‚úÖ Movimientos procesados: {self.procesados}/{len(self.movimientos)}")
        if self.duplicados > 0:
            print(f"  üîÑ Duplicados actualizados: {self.duplicados}")
        if self.omitidos > 0:
            print(f"  ‚è≠Ô∏è  Duplicados omitidos: {self.omitidos}")
        if self.errores > 0:
            print(f"  ‚ùå Errores: {self.errores}")
        
        # Calcular totales
        total_exitosos = self.procesados
        total_no_procesados = self.errores + self.omitidos
        
        print(f"\n  üìä Total exitosos: {total_exitosos}")
        if total_no_procesados > 0:
            print(f"  üìä Total no procesados: {total_no_procesados}")
        
        if self.test_mode:
            print(f"\n{Colors.WARNING}MODO TEST - No se guardaron cambios{Colors.ENDC}")
        
        print(f"{Colors.HEADER}{'='*60}{Colors.ENDC}")
    
    def revisar_clasificacion_ia(self, movimiento):
        """Muestra y permite revisar la clasificaci√≥n sugerida por IA"""
        decision_ia = movimiento.get('decision_ia', {})
        
        if not decision_ia:
            return None
        
        print(f"\n{Colors.OKCYAN}{'='*60}{Colors.ENDC}")
        print(f"{Colors.BOLD}ü§ñ CLASIFICACI√ìN SUGERIDA POR IA{Colors.ENDC}")
        print(f"{Colors.OKCYAN}{'='*60}{Colors.ENDC}")
        
        # Mostrar detalles de clasificaci√≥n
        # Buscar los campos en decision_ia o en el movimiento directamente
        tipo = decision_ia.get('tipo') or movimiento.get('tipo', 'N/A')
        categoria = decision_ia.get('categoria') or movimiento.get('categoria', 'N/A')
        cuenta_vinculada = decision_ia.get('cuenta_vinculada') or movimiento.get('cuenta_destino', 'N/A')
        nota_ia = decision_ia.get('nota_ia', 'N/A')
        confianza = decision_ia.get('confianza', 0)
        
        print(f"\nüìä Tipo detectado: {Colors.BOLD}{tipo}{Colors.ENDC}")
        print(f"üìÅ Categor√≠a: {Colors.BOLD}{categoria}{Colors.ENDC}")
        print(f"üè¶ Cuenta vinculada: {Colors.BOLD}{cuenta_vinculada}{Colors.ENDC}")
        print(f"üìù Nota IA: {nota_ia}")
        print(f"üéØ Confianza: {Colors.BOLD}{confianza*100:.0f}%{Colors.ENDC}")
        
        # Mostrar reglas aplicadas si existen
        reglas = decision_ia.get('reglas_aplicadas', [])
        if reglas:
            print(f"‚öôÔ∏è  Reglas aplicadas: {', '.join(reglas)}")
        
        # Preguntar al usuario
        print(f"\n{Colors.WARNING}¬øLa clasificaci√≥n de la IA es correcta?{Colors.ENDC}")
        print("1) ‚úÖ S√≠, es correcta")
        print("2) ‚ùå No, necesita correcci√≥n")
        print("3) ‚è≠Ô∏è  Omitir (usar clasificaci√≥n manual)")
        
        while True:
            opcion = input(f"\n{Colors.OKCYAN}Seleccione opci√≥n (1/2/3): {Colors.ENDC}").strip()
            
            if opcion == '1':
                # Confirmaci√≥n
                print(f"{Colors.OKGREEN}‚úì Clasificaci√≥n IA confirmada{Colors.ENDC}")
                return {
                    'accion': 'confirmacion',
                    'clasificacion_correcta': {
                        'tipo': decision_ia.get('tipo'),
                        'categoria': decision_ia.get('categoria')
                    }
                }
                
            elif opcion == '2':
                # Correcci√≥n
                print(f"\n{Colors.WARNING}Ingrese la clasificaci√≥n correcta:{Colors.ENDC}")
                
                # Seleccionar tipo correcto
                print("\nTipo de transacci√≥n:")
                print("1) GASTO")
                print("2) INGRESO")
                print("3) TRANSFERENCIA")
                
                tipo_opcion = input(f"{Colors.OKCYAN}Seleccione tipo (1/2/3): {Colors.ENDC}").strip()
                tipo_map = {'1': 'GASTO', '2': 'INGRESO', '3': 'TRANSFERENCIA'}
                tipo_correcto = tipo_map.get(tipo_opcion, decision_ia.get('tipo'))
                
                # Mostrar categor√≠as existentes
                from core.models import Categoria
                categorias = list(Categoria.objects.all().order_by('nombre').values_list('nombre', flat=True))
                
                if categorias:
                    print(f"\n{Colors.OKBLUE}üìÅ Categor√≠as existentes:{Colors.ENDC}")
                    # Mostrar en 4 columnas
                    columnas = 4
                    for i in range(0, len(categorias), columnas):
                        fila = categorias[i:i+columnas]
                        for j, cat in enumerate(fila):
                            print(f"{i+j+1:3}) {cat:<30}", end="")
                        print()
                
                # Ingresar categor√≠a correcta
                categoria_actual = decision_ia.get('categoria') or movimiento.get('categoria', 'N/A')
                print(f"\n{Colors.OKCYAN}Categor√≠a (n√∫mero de lista, nueva categor√≠a, o Enter para '{categoria_actual}'):{Colors.ENDC}")
                categoria_input = input(">>> ").strip()
                
                if not categoria_input:
                    categoria_correcta = categoria_actual
                elif categoria_input.isdigit():
                    idx = int(categoria_input) - 1
                    if 0 <= idx < len(categorias):
                        categoria_correcta = categorias[idx]
                    else:
                        categoria_correcta = categoria_actual
                else:
                    categoria_correcta = categoria_input
                
                print(f"{Colors.OKGREEN}‚úì Correcci√≥n registrada{Colors.ENDC}")
                return {
                    'accion': 'correccion',
                    'clasificacion_original': {
                        'tipo': decision_ia.get('tipo'),
                        'categoria': decision_ia.get('categoria')
                    },
                    'clasificacion_correcta': {
                        'tipo': tipo_correcto,
                        'categoria': categoria_correcta
                    },
                    'nota': f"Corregido por usuario"
                }
                
            elif opcion == '3':
                # Omitir
                print(f"{Colors.WARNING}‚è≠Ô∏è  Clasificaci√≥n IA omitida{Colors.ENDC}")
                return None
            else:
                print(f"{Colors.FAIL}Opci√≥n inv√°lida{Colors.ENDC}")
    
    def registrar_feedback_memoria(self, movimiento, feedback):
        """Registra el feedback del usuario en el sistema de memoria"""
        if not self.memoria_sistema or not feedback:
            return
        
        try:
            # Buscar si hay un patr√≥n asociado
            ref_bancaria = movimiento.get('referencia_bancaria', '')
            
            if ref_bancaria:
                # Registrar feedback para patr√≥n de referencia bancaria
                self.memoria_sistema.registrar_feedback_humano(
                    tipo_patron='referencia_bancaria',
                    patron_id=ref_bancaria,
                    feedback=feedback
                )
                print(f"{Colors.OKGREEN}‚úì Feedback registrado en memoria{Colors.ENDC}")
            
            # Tambi√©n actualizar por monto si aplica
            monto = abs(float(movimiento.get('monto', 0)))
            monto_str = f"{monto:.2f}"
            
            if monto_str in self.memoria_sistema.memoria['patrones_detectados']['montos_exactos']:
                self.memoria_sistema.registrar_feedback_humano(
                    tipo_patron='monto_exacto',
                    patron_id=monto_str,
                    feedback=feedback
                )
            
            # Guardar memoria actualizada
            self.memoria_sistema.guardar_memoria()
            
        except Exception as e:
            logger.warning(f"No se pudo registrar feedback en memoria: {e}")
    
    def exportar_log(self):
        """Exporta el log de operaciones a CSV"""
        if not self.log_operaciones:
            return
        
        import csv
        from datetime import datetime
        
        nombre_archivo = f"importacion_bbva_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
        
        try:
            with open(nombre_archivo, 'w', newline='', encoding='utf-8') as f:
                if self.log_operaciones:
                    writer = csv.DictWriter(f, fieldnames=self.log_operaciones[0].keys())
                    writer.writeheader()
                    writer.writerows(self.log_operaciones)
            
            print(f"\n{Colors.OKGREEN}Log exportado: {nombre_archivo}{Colors.ENDC}")
            
        except Exception as e:
            print(f"{Colors.FAIL}Error al exportar log: {e}{Colors.ENDC}")
            logger.error(f"Error al exportar log: {e}")


def main():
    """Funci√≥n principal"""
    import argparse
    
    parser = argparse.ArgumentParser(description='Importador de movimientos BBVA')
    parser.add_argument('--test', action='store_true', help='Modo test (no guarda en BD)')
    
    args = parser.parse_args()
    
    importador = ImportadorBBVA(test_mode=args.test)
    
    try:
        importador.iniciar()
    except KeyboardInterrupt:
        print(f"\n{Colors.WARNING}Proceso interrumpido por el usuario{Colors.ENDC}")
    except Exception as e:
        print(f"\n{Colors.FAIL}Error cr√≠tico: {e}{Colors.ENDC}")
        logger.critical(f"Error cr√≠tico: {e}", exc_info=True)


if __name__ == '__main__':
    main()