# file: config/settings.py
"""
Django settings for config project.
Generated by 'django-admin startproject' using Django 5.2.3.
"""

from pathlib import Path
import os
import environ

# Build paths
BASE_DIR = Path(__file__).resolve().parent.parent

# Inicializar environ - CON RUTA EXPLÍCITA
env = environ.Env()
env.read_env(os.path.join(BASE_DIR, '.env'))

# Security
SECRET_KEY = env('SECRET_KEY')
DEBUG = env('DEBUG', default=False)
ALLOWED_HOSTS = ['*']  # Agregado para permitir todos los hosts durante desarrollo

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'core.apps.CoreConfig',
    "django_filters",
    'crispy_forms',
    'crispy_bootstrap5',
    'django.contrib.humanize',
    'widget_tweaks',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        # Le decimos a Django que también busque en <proyecto>/templates
        'DIRS': [ BASE_DIR / "templates" ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# Configuramos dos motores: mariadb (a partir de DATABASE_URL) y sqlite (archivo en la raíz del proyecto).
mariadb_config = env.db()  # Usa DATABASE_URL del .env
mariadb_config['OPTIONS'] = {
    'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
    'charset': 'utf8mb4',
}

DATABASES = {
    'mariadb': mariadb_config,
    'sqlite': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    },
}

# Selecciona la base de datos predeterminada según la variable de entorno
# ACTIVE_DB (valores permitidos: mariadb | sqlite). Si no se define, se usa mariadb.
ACTIVE_DB = env('ACTIVE_DB', default='mariadb')
if ACTIVE_DB not in DATABASES:
    raise ValueError(f"ACTIVE_DB debe ser 'mariadb' o 'sqlite', recibido: {ACTIVE_DB}")

DATABASES['default'] = DATABASES[ACTIVE_DB]

# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
LANGUAGE_CODE = 'es-MX'
TIME_ZONE = 'America/Mexico_City'  # CORREGIDO
USE_I18N = True
USE_TZ = True

# Static files
STATIC_URL = 'static/'
DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Sitio al que redirige LoginRequiredMixin si no hay sesión
LOGIN_URL = "login"  
# Tras hacer login, redirige al dashboard
LOGIN_REDIRECT_URL = "/"  
LOGOUT_REDIRECT_URL = "/accounts/login/"  

# Opciones de crispy
CRISPY_ALLOWED_TEMPLATE_PACKS = "bootstrap5"
CRISPY_TEMPLATE_PACK = "bootstrap5"